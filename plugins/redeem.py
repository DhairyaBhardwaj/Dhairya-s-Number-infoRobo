import secrets
from pyrogram import Client, filters
from pyrogram.enums import ParseMode
from pyrogram.types import Message
from database.database import db 
from config import ADMINS 
import asyncio
import re

# Admin filter
admin = filters.user(ADMINS) if ADMINS else filters.user(0) 

# --- DATABASE INTERACTION HELPER (Uses functions from database.py) ---

async def increment_redeem_usage_and_mark_user(code: str, user_id: int, credits_gained: int) -> bool:
    """
    1. Increments the used count for the code.
    2. Marks the user as having redeemed the code.
    3. Adds credits to the user's account via db.add_referral_credits.
    """
    try:
        code_data = await db.get_redeem_code(code)
        if not code_data:
            return False
            
        new_used_count = code_data.get("used_count", 0) + 1
        
        
        used_by_list = code_data.get("used_by", [])
        used_by_list.append(user_id)
        
        
        await db.update_redeem_code(code, {
            "used_count": new_used_count,
            "used_by": used_by_list,
        })
        
        # Add credits to the user (add_referral_credits adds to the total count)
        await db.add_referral_credits(user_id, credits_gained)

        return True
    except Exception as e:
        print(f"·¥á Ä Ä·¥è Ä ·¥ú·¥ò·¥Ö·¥Ä·¥õ…™…¥…¢  Ä·¥á·¥Ö·¥á·¥á·¥ç ·¥Ñ·¥è·¥Ö·¥á {code} ·¥è Ä ·¥Ä·¥Ö·¥Ö…™…¥…¢ ·¥Ñ Ä·¥á·¥Ö…™·¥õs: {e}")
        return False

# --- ADMIN COMMAND: CREATE REDEEM CODE ---

@Client.on_message(filters.command("add_redeem") & filters.private & admin)
async def add_redeem_command(client: Client, message: Message):
    """
    ·¥Ñ Ä·¥á·¥Ä·¥õ·¥ás ·¥Ä …¥·¥á·¥°  Ä·¥á·¥Ö·¥á·¥á·¥ç ·¥Ñ·¥è·¥Ö·¥á.
    ·¥ús·¥Ä…¢·¥á: /add_redeem <credits_per_user> <max_users>
    """
    
    parts = message.text.split()
    
    if len(parts) != 3 or not parts[1].isdigit() or not parts[2].isdigit():
        return await message.reply_text(
            "<b><blockquote>‚ö†Ô∏è …™…¥·¥†·¥Ä ü…™·¥Ö ·¥ús·¥Ä…¢·¥á.\n"
            "·¥ús·¥Ä…¢·¥á: <code>/add_redeem <·¥Ñ Ä·¥á·¥Ö…™·¥õs_·¥ò·¥á Ä_·¥ús·¥á Ä> <·¥ç·¥Äx_·¥ús·¥á Äs></code>\n"
            "·¥á.…¢., <code>/add_redeem 2 50</code> (“ì…™ Äs·¥õ 50 ·¥ús·¥á Äs …¢·¥á·¥õ 2 ·¥Ñ Ä·¥á·¥Ö…™·¥õs ·¥á·¥Ä·¥Ñ ú)</blockquote></b>",
            parse_mode=ParseMode.HTML
        )
        
    try:
        credits_to_give = int(parts[1])
        max_uses = int(parts[2])
    except ValueError:
        return await message.reply_text(
            "<b><blockquote>‚ö†Ô∏è ·¥Ñ Ä·¥á·¥Ö…™·¥õs ·¥Ä…¥·¥Ö ·¥ús·¥á Äs ·¥ç·¥ús·¥õ  ô·¥á …¥·¥ú·¥ç ô·¥á Äs.</blockquote></b>",
            parse_mode=ParseMode.HTML
        )
        
    if credits_to_give <= 0 or max_uses <= 0:
        return await message.reply_text(
            "<b><blockquote>‚ö†Ô∏è ·¥Ñ Ä·¥á·¥Ö…™·¥õs ·¥Ä…¥·¥Ö ·¥ús·¥á Äs ·¥ç·¥ús·¥õ  ô·¥á …¢ Ä·¥á·¥Ä·¥õ·¥á Ä ·¥õ ú·¥Ä…¥ ·¥¢·¥á Ä·¥è.</blockquote></b>",
            parse_mode=ParseMode.HTML
        )

    # Generate unique code: SayXSee_ + 10 random URL-safe characters
    code_suffix = secrets.token_urlsafe(10)
    new_code = f"SayXSee_{code_suffix}"
    
    # Data to be stored in the 'redeem_codes' collection
    code_data = {
        "credits": credits_to_give,
        "max_uses": max_uses,
        "used_count": 0,
        "used_by": [], 
        "is_active": True
    }
    
    if await db.add_redeem_code(new_code, code_data):
        response_text = f"üéâ  Ä·¥á·¥Ö·¥á·¥á·¥ç ·¥Ñ·¥è·¥Ö·¥á ·¥Ñ Ä·¥á·¥Ä·¥õ·¥á·¥Ö s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è!\n\n"
        response_text += f"·¥Ñ·¥è·¥Ö·¥á …™·¥Ö: <code>/get_redeem {new_code}</code>\n"
        response_text += f"·¥Ñ Ä·¥á·¥Ö…™·¥õs ·¥ò·¥á Ä ·¥ús·¥á Ä: {credits_to_give}\n"
        response_text += f"·¥ç·¥Äx…™·¥ç·¥ú·¥ç ·¥ús·¥ás: {max_uses}\n"
        response_text += f"s ú·¥Ä Ä·¥á ·¥õ ú…™s ·¥Ñ·¥è·¥Ö·¥á ·¥°…™·¥õ ú ·¥ús·¥á Äs ·¥õ·¥è  ü·¥á·¥õ ·¥õ ú·¥á·¥ç  Ä·¥á·¥Ö·¥á·¥á·¥ç."
        
        await message.reply_text(
            f"<b><blockquote>{response_text}</blockquote></b>",
            parse_mode=ParseMode.HTML
        )
    else:
        await message.reply_text(
            "<b><blockquote>‚ùå ·¥á Ä Ä·¥è Ä …™…¥ ·¥Ñ Ä·¥á·¥Ä·¥õ…™…¥…¢ ·¥Ñ·¥è·¥Ö·¥á …™…¥ ·¥Ö·¥Ä·¥õ·¥Ä ô·¥Äs·¥á. ·¥Ñ ú·¥á·¥Ñ·¥ã  ü·¥è…¢s.</blockquote></b>",
            parse_mode=ParseMode.HTML
        )

# --- USER COMMAND: REDEEM CODE ---

@Client.on_message(filters.command("get_redeem") & filters.private)
async def get_redeem_command(client: Client, message: Message):
    """
    ·¥Ä ü ü·¥è·¥°s ·¥ús·¥á Äs ·¥õ·¥è  Ä·¥á·¥Ö·¥á·¥á·¥ç ·¥Ä s·¥ò·¥á·¥Ñ…™·¥Ä ü ·¥Ñ·¥è·¥Ö·¥á “ì·¥è Ä ·¥Ñ Ä·¥á·¥Ö…™·¥õs.
    ·¥ús·¥Ä…¢·¥á: /get_redeem <code_id>
    """
    
    parts = message.text.split()
    user_id = message.from_user.id

    if len(parts) != 2:
        return await message.reply_text(
            "<b><blockquote>‚ö†Ô∏è …™…¥·¥†·¥Ä ü…™·¥Ö ·¥ús·¥Ä…¢·¥á.\n"
            "·¥ús·¥Ä…¢·¥á: <code>/get_redeem <·¥Ñ·¥è·¥Ö·¥á_…™·¥Ö></code>\n"
            "·¥á.…¢., <code>/get_redeem SayXSee_wanj18xn2</code></blockquote></b>",
            parse_mode=ParseMode.HTML
        )
        
    code_to_redeem = parts[1].strip()
    code_data = await db.get_redeem_code(code_to_redeem)
    
    if not code_data or not code_data.get("is_active", True):
        return await message.reply_text(
            "<b><blockquote>‚ùå …™…¥·¥†·¥Ä ü…™·¥Ö ·¥è Ä …™…¥·¥Ä·¥Ñ·¥õ…™·¥†·¥á  Ä·¥á·¥Ö·¥á·¥á·¥ç ·¥Ñ·¥è·¥Ö·¥á. ·¥Ö·¥è·¥ú ô ü·¥á-·¥Ñ ú·¥á·¥Ñ·¥ã ·¥õ ú·¥á ·¥Ñ·¥è·¥Ö·¥á ·¥Ä…¥·¥Ö ·¥õ Ä è ·¥Ä…¢·¥Ä…™…¥.</blockquote></b>",
            parse_mode=ParseMode.HTML
        )

    # --- 1. Check if already redeemed ---
    
    used_by = code_data.get("used_by", [])
    if user_id in used_by:
        return await message.reply_text(
            "<b><blockquote>‚ö†Ô∏è  è·¥è·¥ú  ú·¥Ä·¥†·¥á ·¥Ä ü Ä·¥á·¥Ä·¥Ö è  Ä·¥á·¥Ö·¥á·¥á·¥ç·¥á·¥Ö ·¥õ ú…™s ·¥Ñ·¥è·¥Ö·¥á. ·¥è…¥·¥á ·¥ús·¥á ·¥ò·¥á Ä ·¥ús·¥á Ä.</blockquote></b>",
            parse_mode=ParseMode.HTML
        )

    # --- 2. Check for maximum uses ---
    max_uses = code_data.get("max_uses", 0)
    used_count = code_data.get("used_count", 0)
    credits_gained = code_data.get("credits", 0)
    
    if used_count >= max_uses:
        
        return await message.reply_text(
            "<b><blockquote>‚ùå ·¥õ ú…™s  Ä·¥á·¥Ö·¥á·¥á·¥ç ·¥Ñ·¥è·¥Ö·¥á  ú·¥Äs  Ä·¥á·¥Ä·¥Ñ ú·¥á·¥Ö …™·¥õs ·¥ç·¥Äx…™·¥ç·¥ú·¥ç ·¥ús·¥Ä…¢·¥á  ü…™·¥ç…™·¥õ. …™·¥õ …™s …¥·¥è·¥° ·¥áx·¥ò…™ Ä·¥á·¥Ö.</blockquote></b>",
            parse_mode=ParseMode.HTML
        )

    # --- 3. Redeem the code ---
    if await increment_redeem_usage_and_mark_user(code_to_redeem, user_id, credits_gained):
        
        # Get updated status for response clarity
        
        daily_tries, is_premium, _ = await db.get_user_status(user_id) 
        new_total = '·¥ú…¥ ü…™·¥ç…™·¥õ·¥á·¥Ö' if is_premium else daily_tries

        success_text = f"‚úÖ s·¥ú·¥Ñ·¥Ñ·¥áss!  è·¥è·¥ú  ú·¥Ä·¥†·¥á  Ä·¥á·¥Ö·¥á·¥á·¥ç·¥á·¥Ö ·¥õ ú·¥á ·¥Ñ·¥è·¥Ö·¥á.\n\n"
        success_text += f"üéâ ·¥Ñ Ä·¥á·¥Ö…™·¥õs ·¥Ä·¥Ö·¥Ö·¥á·¥Ö: <b>{credits_gained}</b>\n"
        success_text += f"üí∞  è·¥è·¥ú Ä …¥·¥á·¥° ·¥õ·¥è·¥õ·¥Ä ü ·¥Ñ Ä·¥á·¥Ö…™·¥õs: {new_total}\n"
        success_text += f"üìä ·¥Ñ·¥è·¥Ö·¥á ·¥ús·¥Ä…¢·¥á: {used_count + 1} / {max_uses}"
        
        await message.reply_text(
            f"<b><blockquote>{success_text}</blockquote></b>",
            parse_mode=ParseMode.HTML
        )
    else:
        await message.reply_text(
            "<b><blockquote>‚ùå “ì·¥Ä…™ ü·¥á·¥Ö ·¥õ·¥è  Ä·¥á·¥Ö·¥á·¥á·¥ç. ·¥Ä…¥ …™…¥·¥õ·¥á Ä…¥·¥Ä ü ·¥á Ä Ä·¥è Ä ·¥è·¥Ñ·¥Ñ·¥ú Ä Ä·¥á·¥Ö. ·¥ò ü·¥á·¥Äs·¥á ·¥õ Ä è ·¥Ä…¢·¥Ä…™…¥  ü·¥Ä·¥õ·¥á Ä.</blockquote></b>",
            parse_mode=ParseMode.HTML
        )
